ortho(maks)
orthographic(mask)
class(mask)
mask = whitestripe_ind_to_mask(t1, ind$whitestripe.ind)
orthographic(mask)
library(bitops)
help(package="bitops")
library(mmand)
??v
??erode
install.packages("mmand")
library(mmand)
?erode
orthographic(mask)
mask[mask == 0] = NA
orthographic(t1, mask)
orthographic(t1, mask, col.y="red")
t1 = readNIfTI(system.file("T1Strip.nii.gz", package="WhiteStripe"))
ind = whitestripe_hybrid(t1)
t1 = readNIfTI(system.file("T1Strip.nii.gz", package="WhiteStripe"))
ind = whitestripe(t1)
t1 = readNIfTI(system.file("T1Strip.nii.gz", package="WhiteStripe"))
ind = whitestripe(t1, "T1")
t1 = readNIfTI(system.file("T1Strip.nii.gz", package="WhiteStripe"))
t1.ind = whitestripe(t1, "T1")
t1.mask = whitestripe_ind_to_mask(t1, t1.ind$whitestripe.ind)
t1.mask[t1.mask == 0] = NA
orthographic(t1, t1.mask, col.y="red")
t2.mask = whitestripe_ind_to_mask(t2, t2.ind$whitestripe.ind)
t2 = readNIfTI(system.file("T2Strip.nii.gz", package="WhiteStripe"))
t2.ind = whitestripe(t1, "T2")
t2.mask = whitestripe_ind_to_mask(t2, t2.ind$whitestripe.ind)
t2 = readNIfTI(system.file("T2Strip.nii.gz", package="WhiteStripe"))
t2.ind = whitestripe(t2, "T2")
t2.mask = whitestripe_ind_to_mask(t2, t2.ind$whitestripe.ind)
t2.mask[t2.mask == 0] = NA
orthographic(t2, t2.mask, col.y="red")
library(WhiteStripe)
library(WhiteStripe)
library(WhiteStripe)
library(WhiteStripe)
library(WhiteStripe)
library(WhiteStripe)
library(WhiteStripe)
?get.largest.mode
?whitestripe
t1 = readNIfTI(system.file("T1Strip.nii.gz", package="WhiteStripe"))
t1.ind = whitestripe(t1, "T1")
t1.mask = whitestripe_ind_to_mask(t1, t1.ind$whitestripe.ind)
t1.mask[t1.mask == 0] = NA
orthographic(t1, t1.mask, col.y="red")
t2 = readNIfTI(system.file("T2Strip.nii.gz", package="WhiteStripe"))
t2.ind = whitestripe(t2, "T2")
t2.mask = whitestripe_ind_to_mask(t2, t2.ind$whitestripe.ind)
t2.mask[t2.mask == 0] = NA
orthographic(t2, t2.mask, col.y="red")
?whitestripe
help(package="WhiteStripe")
?smooth_hist
help(package="WhiteStripe")
help(package="WhiteStripe")
library(WhiteStripe)
help(package="WhiteStripe")
library(WhiteStripe)
whitestripe
get.largest.mode
?smooth_hist
smooth_hist
whitestripe
library(WhiteStripe)
warnings()
library(WhiteStripe)
library(WhiteStripe)
library(WhiteStripe)
library(WhiteStripe)
library(WhiteStripe)
t1 = readNIfTI(system.file("T1Strip.nii.gz", package="WhiteStripe"))
t1.voi = make_img_voi(t1)
system.file("data/t1.voi.Rda", package="WhiteStripe")
file.exists(system.file("data/t1.voi.Rda", package="WhiteStripe"))
save(t1.voi, file= "data/t1.voi.rda", compression_level=9)
?save
save(t1.voi, file= "data/t1.voi.rda", compress = TRUE, compression_level=9)
t1.voi
hist(t1)
t1 = readNIfTI(system.file("T1Strip.nii.gz", package="WhiteStripe"))
t1[ t1 == 0] = NA
t1.voi = make_img_voi(t1, na.rm=TRUE)
t1.voi
make_img_voi
t1 = readNIfTI(system.file("T1Strip.nii.gz", package="WhiteStripe"))
t1[ t1 == 0] = NA
t1.voi = make_img_voi(t1, na.rm=TRUE)
t1.voi = t1.voi[!is.na(t1.voi)]
t1.voi
save(t1.voi, file= "data/t1.voi.rda", compress = TRUE, compression_level=9)
#' t2 = readNIfTI(system.file("T2Strip.nii.gz", package="WhiteStripe"))
#' t2[ t2 == 0] = NA
#' t2.voi = make_img_voi(t2, na.rm=TRUE)
#' t2.voi = t2.voi[!is.na(t2.voi)]
#' t2 = readNIfTI(system.file("T2Strip.nii.gz", package="WhiteStripe"))
#' t2[ t2 == 0] = NA
#' t2.voi = make_img_voi(t2, na.rm=TRUE)
#' t2.voi = t2.voi[!is.na(t2.voi)]
#' \dontrun{
#' t2 = readNIfTI(system.file("T2Strip.nii.gz", package="WhiteStripe"))
#' t2[ t2 == 0] = NA
#' t2.voi = make_img_voi(t2, na.rm=TRUE)
#' t2.voi = t2.voi[!is.na(t2.voi)]
#' }
t2 = readNIfTI(system.file("T2Strip.nii.gz", package="WhiteStripe"))
t2[ t2 == 0] = NA
t2.voi = make_img_voi(t2, na.rm=TRUE)
t2.voi = t2.voi[!is.na(t2.voi)]
save(t2.voi, file= "data/t2.voi.rda", compress = TRUE, compression_level=9)
t2 = readNIfTI(system.file("T2Strip.nii.gz", package="WhiteStripe"))
t2[ t2 == 0] = NA
t2.voi = make_img_voi(t2, na.rm=TRUE)
t2.voi = t2.voi[!is.na(t2.voi)]
img.hist = hist(t2.voi,
breaks=2000,
plot=FALSE)
img.hist
plot(img.hist)
t2 = readNIfTI(system.file("T2Strip.nii.gz", package="WhiteStripe"))
t2.voi = make_img_voi(t2)
hist(t2.voi)
hist(t2.voi, breaks= 2000)
t2 = readNIfTI(system.file("T2Strip.nii.gz", package="WhiteStripe"))
t2.voi = make_img_voi(t2)
t2.voi = t2.voi[!is.na(t2.voi)]
hist(t2.voi)
img.hist = hist(t2.voi,
breaks=2000,
plot=FALSE)
y = img.hist$counts
x = img.hist$mids
x = x[!is.na(y)];
y = y[!is.na(y)]
s.hist = smooth_hist(x, y, k=70)
s.hist
data(t2.voi)
system.time({
img.hist = hist(t2.voi,
breaks=2000,
plot=FALSE)
y = img.hist$counts
x = img.hist$mids
x = x[!is.na(y)];
y = y[!is.na(y)]
# 70 used for speed of example
nawm_peak = get.largest.mode(x, y, k=70)
hist(t2.voi, breaks=2000, border="red")
abline(v=nawm_peak)
})
t2.voi
t2.voi = t2.voi[t2.voi != 0]
img.hist = hist(t2.voi,
breaks=2000,
plot=FALSE)
y = img.hist$counts
x = img.hist$mids
x = x[!is.na(y)];
y = y[!is.na(y)]
# 70 used for speed of example
nawm_peak = get.largest.mode(x, y, k=70)
hist(t2.voi, breaks=2000, border="red")
abline(v=nawm_peak)
dev.off()
img.hist = hist(t2.voi,
breaks=2000,
plot=FALSE)
y = img.hist$counts
x = img.hist$mids
x = x[!is.na(y)];
y = y[!is.na(y)]
# 70 used for speed of example
nawm_peak = get.largest.mode(x, y, k=70)
hist(t2.voi, breaks=2000, border="red")
abline(v=nawm_peak)
head(t2.voi)
make_img_voi
t2 = readNIfTI(system.file("T2Strip.nii.gz", package="WhiteStripe"))
t2.voi = make_img_voi(t2)
t2.voi = t2.voi[!is.na(t2.voi)]
save(t2.voi, file="data/t2.voi.rda", compression_level=9, compress = TRUE)
library(WhiteStripe)
t2 = readNIfTI(system.file("T2Strip.nii.gz", package="WhiteStripe"))
t2[ t2 == 0]= NA
t2.voi = make_img_voi(t2, na.rm=TRUE)
t2.voi
t2.voi = t2.voi[!is.na(t2.voi)]
t2.voi
t1 = readNIfTI(system.file("T1Strip.nii.gz", package="WhiteStripe"))
t1[t1 == 0] = NA
t1.voi = make_img_voi(t1, na.rm=TRUE)
t1.voi
hist(t1.voi, breaks=2000)
#####################################################################################################################
#####################################################################################################################
# This file considers the derivatives of the histograms.
# July 16, 2013
#####################################################################################################################
############################################################################################
library(AnalyzeFMRI)
library(RColorBrewer)
library(R.utils)
library(SemiPar)
cols=brewer.pal(8,'Dark2')
#data.path<-'/dexter/disk1/smart/msmri/NINDS_3T/NINDS_3T/'
data.path<-'~/Dropbox/Packages/WhiteStripe/data/'
curr.path<-data.path
scan.ids<-unique(substr(list.dirs(data.path),40,99))
scan.ids<-scan.ids[nchar(scan.ids)>5]
scan.ids<-scan.ids[1:150]
epsilon<-1E-8
whitestripe.q.width<-0.05 #radius of white stripe
whitestripe.t1only.q.width<-0.05 #radius of white stripe
smooth.hist = function(x, y, deg = 3, k = 250, method = "REML", ...){
require(mgcv)
x = x[which(y != -Inf)]
y = y[which(y != -Inf)]
qtiles <- seq(0, 1, length = k+2)[-c(1, k+2)]
knots <- quantile(x, qtiles)
phi = cbind(sapply(0:deg, function(k) (x^k) ), sapply(knots, function(k) ((x - k > 0) * (x - k)^deg)))
X = phi
D = list(length=1)
D[[1]] = diag(c(rep(0, deg+1), rep(1, k)))
fit = gam(y~X-1, paraPen=list(X=D), method = method, ...)
coefs = fit$coef
fitted.vals = cbind(phi)%*%coefs
ret = list(x, y, coefs, fitted.vals, fit, knots)
names(ret) = c("x", "y", "coefs", "fitted.vals", "fit", "knots")
return(ret)
}
#This function outputs the nth derivative of a histogram smooth.
get.deriv.smooth.hist <- function(x,coefs,knots,deg=3,deriv.deg=1) {
deriv.coefs<-coefs[2:length(coefs)]*c(1:deg,rep(deg,length(knots)))
deriv.phi = cbind(sapply(0:(deg-1), function(k) (x^k) ), sapply(knots, function(k) ((x - k > 0) * (x - k)^(deg-1))))
if (deriv.deg>1) {
return(get.deriv.smooth.hist(x,coefs=deriv.coefs,deg=deg-1,knots=knots,deriv.deg=deriv.deg-1))
} else {
return(cbind(deriv.phi)%*%deriv.coefs)
}
}
#This function grabs the last peak or shoulder.
get.last.mode<-function(x.in,y.in,t1.voi,rare.prop=1/5) {
#Remove background
#	y<-y.in[x.in>mean(t1.voi)]
#	x<-x.in[x.in>mean(t1.voi)]
x<-x.in;y<-y.in
#Remove rare intensity tail
which.rare<-which(y<rare.prop*max(y))
y<-y[-which.rare]
x<-x[-which.rare]
#estimate derivative
deg<-4
system.time(smooth1 <- smooth.hist(x, y, deg=deg, k=floor(min(250,length(x)/2))))
dy<-get.deriv.smooth.hist(x,smooth1$coefs,smooth1$knots,deg=deg,deriv.deg=1)
which.zero.crossing<-which((dy[1:(length(x)-1)]>0)>(dy[2:(length(x))]>0))
last.peak<-max(x[which.zero.crossing])
#if (last.peak<median(t1.voi[t1.voi>mean(t1.voi)])) {
#	biggest.shoulder<-(x[x>median(t1.voi[t1.voi>mean(t1.voi)])])[which.min(abs(dy[x>median(t1.voi[t1.voi>mean(t1.voi)])]))]
#	return(biggest.shoulder)
#} else {
#	return(last.peak)
#}
return(last.peak)
}
#This function grabs the largest peak.
get.largest.mode<-function(x.in,y.in,t2.voi) {
#Remove background  -- ALREADY REMOVED!!!
#	y<-y.in[x.in>mean(t2.voi)]
#	x<-x.in[x.in>mean(t2.voi)]
x<-x.in;y<-y.in
#estimate derivative
deg<-4
system.time(smooth1 <- smooth.hist(x, y, deg=deg, k=floor(min(250,length(x)/2))))
dy<-get.deriv.smooth.hist(x,smooth1$coefs,smooth1$knots,deg=deg,deriv.deg=1)
which.zero.crossing<-which((dy[1:(length(x)-1)]>0)>(dy[2:(length(x))]>0))
largest.peak<-x[which.zero.crossing[which.max(y[which.zero.crossing])]]
return(largest.peak)
}
#scratch.location<-'/scratch/temp/rshinoha' #HOPKINS CLUSTER
#scratch.location<-'/project/taki2/scratch' #PENN CLUSTER
scratch.location<-'/scratch/rshi' #PENN CLUSTER
##This function unzips and reads a .nii.gz file FROM A NODE.
readniigz <- function(file){
if (!file.exists(scratch.location)) dir.create(scratch.location)
name <- tempfile(pattern = "tempfile", tmpdir = scratch.location, fileext = ".nii")
file.copy(file,paste(name,'.gz',sep=''),overwrite=TRUE)
gunzip(paste(name,'.gz',sep=''),name,overwrite=TRUE)
image <- f.read.nifti.volume(name)
try(unlink(name))
return(image)
}
##This function writes and zips a .nii.gz file FROM A NODE.
writeniigz <- function(image,file){
if (!file.exists(scratch.location)) dir.create(scratch.location)
name <- tempfile(pattern = "tempfile", tmpdir = scratch.location, fileext = ".nii")
f.write.nifti(image,name,size="float",nii=TRUE)
gzip(name, paste(name,'.gz',sep=''), remove = TRUE,overwrite=TRUE)
try.save<-file.copy(paste(name,'.gz',sep=''),file,overwrite=TRUE)
try(unlink(paste(name,'.gz',sep='')))
}
#####################################################################################################################
#####################################################################################################################
# Normalize the data
#####################################################################################################################
#####################################################################################################################
d.t1<-list();d.t1.bet.norm<-list();d.t1.brain.norm<-list();d.t1.new.norm<-list();d.t1.whitestripe.norm<-list();d.t1.wholeimage.norm<-list();d.t1.whitestripe.t1only.norm<-list()
d.t2<-list();d.t2.bet.norm<-list();d.t2.brain.norm<-list();d.t2.new.norm<-list();d.t2.whitestripe.norm<-list();d.t2.wholeimage.norm<-list();d.t2.whitestripe.t1only.norm<-list()
d.flair<-list();d.flair.bet.norm<-list();d.flair.brain.norm<-list();d.flair.new.norm<-list();d.flair.whitestripe.norm<-list();d.flair.wholeimage.norm<-list();d.flair.whitestripe.t1only.norm<-list()
d.pd<-list();d.pd.bet.norm<-list();d.pd.brain.norm<-list();d.pd.new.norm<-list();d.pd.whitestripe.norm<-list();d.pd.wholeimage.norm<-list();d.pd.whitestripe.t1only.norm<-list()
whitestripe.t1<-list();whitestripe.t2<-list();whitestripe.flair<-list();whitestripe.pd<-list();
scan.ids
#####################################################################################################################
#####################################################################################################################
# This file considers the derivatives of the histograms.
# July 16, 2013
#####################################################################################################################
############################################################################################
rm(list=ls())
library(AnalyzeFMRI)
library(RColorBrewer)
library(R.utils)
library(SemiPar)
cols=brewer.pal(8,'Dark2')
#data.path<-'/dexter/disk1/smart/msmri/NINDS_3T/NINDS_3T/'
data.path<-'~/Dropbox/Packages/WhiteStripe/data/'
curr.path<-data.path
epsilon<-1E-8
whitestripe.q.width<-0.05 #radius of white stripe
whitestripe.t1only.q.width<-0.05 #radius of white stripe
#####################################################################################################################
#####################################################################################################################
smooth.hist = function(x, y, deg = 3, k = 250, method = "REML", ...){
require(mgcv)
x = x[which(y != -Inf)]
y = y[which(y != -Inf)]
qtiles <- seq(0, 1, length = k+2)[-c(1, k+2)]
knots <- quantile(x, qtiles)
phi = cbind(sapply(0:deg, function(k) (x^k) ), sapply(knots, function(k) ((x - k > 0) * (x - k)^deg)))
X = phi
D = list(length=1)
D[[1]] = diag(c(rep(0, deg+1), rep(1, k)))
fit = gam(y~X-1, paraPen=list(X=D), method = method, ...)
coefs = fit$coef
fitted.vals = cbind(phi)%*%coefs
ret = list(x, y, coefs, fitted.vals, fit, knots)
names(ret) = c("x", "y", "coefs", "fitted.vals", "fit", "knots")
return(ret)
}
#This function outputs the nth derivative of a histogram smooth.
get.deriv.smooth.hist <- function(x,coefs,knots,deg=3,deriv.deg=1) {
deriv.coefs<-coefs[2:length(coefs)]*c(1:deg,rep(deg,length(knots)))
deriv.phi = cbind(sapply(0:(deg-1), function(k) (x^k) ), sapply(knots, function(k) ((x - k > 0) * (x - k)^(deg-1))))
if (deriv.deg>1) {
return(get.deriv.smooth.hist(x,coefs=deriv.coefs,deg=deg-1,knots=knots,deriv.deg=deriv.deg-1))
} else {
return(cbind(deriv.phi)%*%deriv.coefs)
}
}
#This function grabs the last peak or shoulder.
get.last.mode<-function(x.in,y.in,t1.voi,rare.prop=1/5) {
#Remove background
#	y<-y.in[x.in>mean(t1.voi)]
#	x<-x.in[x.in>mean(t1.voi)]
x<-x.in;y<-y.in
#Remove rare intensity tail
which.rare<-which(y<rare.prop*max(y))
y<-y[-which.rare]
x<-x[-which.rare]
#estimate derivative
deg<-4
system.time(smooth1 <- smooth.hist(x, y, deg=deg, k=floor(min(250,length(x)/2))))
dy<-get.deriv.smooth.hist(x,smooth1$coefs,smooth1$knots,deg=deg,deriv.deg=1)
which.zero.crossing<-which((dy[1:(length(x)-1)]>0)>(dy[2:(length(x))]>0))
last.peak<-max(x[which.zero.crossing])
#if (last.peak<median(t1.voi[t1.voi>mean(t1.voi)])) {
#	biggest.shoulder<-(x[x>median(t1.voi[t1.voi>mean(t1.voi)])])[which.min(abs(dy[x>median(t1.voi[t1.voi>mean(t1.voi)])]))]
#	return(biggest.shoulder)
#} else {
#	return(last.peak)
#}
return(last.peak)
}
#This function grabs the largest peak.
get.largest.mode<-function(x.in,y.in,t2.voi) {
#Remove background  -- ALREADY REMOVED!!!
#	y<-y.in[x.in>mean(t2.voi)]
#	x<-x.in[x.in>mean(t2.voi)]
x<-x.in;y<-y.in
#estimate derivative
deg<-4
system.time(smooth1 <- smooth.hist(x, y, deg=deg, k=floor(min(250,length(x)/2))))
dy<-get.deriv.smooth.hist(x,smooth1$coefs,smooth1$knots,deg=deg,deriv.deg=1)
which.zero.crossing<-which((dy[1:(length(x)-1)]>0)>(dy[2:(length(x))]>0))
largest.peak<-x[which.zero.crossing[which.max(y[which.zero.crossing])]]
return(largest.peak)
}
#scratch.location<-'/scratch/temp/rshinoha' #HOPKINS CLUSTER
#scratch.location<-'/project/taki2/scratch' #PENN CLUSTER
scratch.location<-'/scratch/rshi' #PENN CLUSTER
##This function unzips and reads a .nii.gz file FROM A NODE.
readniigz <- function(file){
if (!file.exists(scratch.location)) dir.create(scratch.location)
name <- tempfile(pattern = "tempfile", tmpdir = scratch.location, fileext = ".nii")
file.copy(file,paste(name,'.gz',sep=''),overwrite=TRUE)
gunzip(paste(name,'.gz',sep=''),name,overwrite=TRUE)
image <- f.read.nifti.volume(name)
try(unlink(name))
return(image)
}
##This function writes and zips a .nii.gz file FROM A NODE.
writeniigz <- function(image,file){
if (!file.exists(scratch.location)) dir.create(scratch.location)
name <- tempfile(pattern = "tempfile", tmpdir = scratch.location, fileext = ".nii")
f.write.nifti(image,name,size="float",nii=TRUE)
gzip(name, paste(name,'.gz',sep=''), remove = TRUE,overwrite=TRUE)
try.save<-file.copy(paste(name,'.gz',sep=''),file,overwrite=TRUE)
try(unlink(paste(name,'.gz',sep='')))
}
#####################################################################################################################
#####################################################################################################################
# Normalize the data
#####################################################################################################################
#####################################################################################################################
d.t1<-list();d.t1.bet.norm<-list();d.t1.brain.norm<-list();d.t1.new.norm<-list();d.t1.whitestripe.norm<-list();d.t1.wholeimage.norm<-list();d.t1.whitestripe.t1only.norm<-list()
d.t2<-list();d.t2.bet.norm<-list();d.t2.brain.norm<-list();d.t2.new.norm<-list();d.t2.whitestripe.norm<-list();d.t2.wholeimage.norm<-list();d.t2.whitestripe.t1only.norm<-list()
d.flair<-list();d.flair.bet.norm<-list();d.flair.brain.norm<-list();d.flair.new.norm<-list();d.flair.whitestripe.norm<-list();d.flair.wholeimage.norm<-list();d.flair.whitestripe.t1only.norm<-list()
d.pd<-list();d.pd.bet.norm<-list();d.pd.brain.norm<-list();d.pd.new.norm<-list();d.pd.whitestripe.norm<-list();d.pd.wholeimage.norm<-list();d.pd.whitestripe.t1only.norm<-list()
whitestripe.t1<-list();whitestripe.t2<-list();whitestripe.flair<-list();whitestripe.pd<-list();
t2 = readNIfTI(system.file("T2Strip.nii.gz", package="WhiteStripe"))
t2.voi = make_img_voi(t2, na.rm=TRUE)
hist(t2, breaks=2000)
hist(t2.voi, breaks=2000)
t1 = readNIfTI(system.file("T1Strip.nii.gz", package="WhiteStripe"))
t1.voi = make_img_voi(t1, na.rm=TRUE)
hist(t1.voi, breaks=2000)
ortho2(t1)
orthographic(t1)
hist(t1)
orthographic(t2)
hist(t2)
t1 = readNIfTI(system.file("T1Strip.nii.gz", package="WhiteStripe"))
t1.voi = make_img_voi(t1, na.rm=TRUE)
hist(t1.voi)
hist(t1.voi, breaks=2000)
t1 = readNIfTI(system.file("T1Strip.nii.gz", package="WhiteStripe"))
t1.voi = make_img_voi(t1, na.rm=TRUE)
t1 = readNIfTI(system.file("T1Strip.nii.gz", package="WhiteStripe"))
t1.voi = make_img_voi(t1)
v1.voi
t1.voi
any(is.na(t1.voi))
t2 = readNIfTI(system.file("T2Strip.nii.gz", package="WhiteStripe"))
t2.voi = make_img_voi(t2)
any(is.na(t2.voi))
# FALSE
save(t2.voi, file="data/t2.voi.rda", compress = TRUE, compression_level=9)
t1 = readNIfTI(system.file("T1Strip.nii.gz", package="WhiteStripe"))
t1.voi = make_img_voi(t1)
any(is.na(t1.voi))
# FALSE
save(t1.voi, file="data/t1.voi.rda", compress = TRUE, compression_level=9)
data(t2.voi)
img.hist = hist(t2.voi,
breaks=2000,
plot=FALSE)
y = img.hist$counts
x = img.hist$mids
x = x[!is.na(y)];
y = y[!is.na(y)]
# 70 used for speed of example
s.hist = smooth_hist(x, y, k=70)
s.hist
data(smoothed_histogram)
dy<-get.deriv.smooth.hist(xvals,
coefs=s.hist$coefs,
knots=s.hist$knots,
deg=s.hist$deg,
deriv.deg=1)
library(WhiteStripe)
?gam
meta$Date
library(WhiteStripe)
q('no')
library(WhiteStripe)
q('no')
?gem
library(mgcv)
?gam
library(WhiteStripe)
library(WhiteStripe)
q('no')
library(WhiteStripe)
data(t2.voi)
img.hist = hist(t2.voi,
breaks=2000,
plot=FALSE)
library(WhiteStripe)
library(WhiteStripe)
pnorm(1) - pnorm(-1)
qnorm(0.55)
qnorm(0.45)
library(WhiteStripe)
library(WhiteStripe)
library(WhiteStripe)
library(WhiteStripe)
library(WhiteStripe)
library(WhiteStripe)
