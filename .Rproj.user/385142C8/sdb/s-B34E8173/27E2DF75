{
    "contents" : "#' @title Grab largest peak\n#'\n#' @description This function grabs the largest peak of the histogram\n#' @param x values of midpoints from \\code{\\link{hist}}\n#' @param y values of counts from \\code{\\link{hist}}\n#' @param verbose print diagnostic output\n#' @param ... arguments to be passed to \\code{\\link{smooth_hist}}\n#' @export\n#' @import mgcv\n#' @return Value of x that is the largest peak\n#' @examples \n#' data(t2.voi)\n#' system.time({\n#' img.hist = hist(t2.voi, \n#' breaks=2000, \n#' plot=FALSE)\n#' y = img.hist$counts\n#' x = img.hist$mids\n#' x = x[!is.na(y)];\n#' y = y[!is.na(y)]\n#' # 70 used for speed of example\n#' nawm_peak = get.largest.mode(x, y, k=70)\n#' hist(t2.voi, breaks=2000, border=\"red\")\n#' abline(v=nawm_peak)\n#' })\nget.largest.mode <- function(x, y, verbose = TRUE,\n  ...) {\n  \n  #estimate derivative\n  if (verbose){\n    cat(\"Smoothing Histogram\\n\")\n  }\n  system.time({\n    smooth1 = smooth_hist(x, y, ...)\n  })\n  #estimate derivative\n  if (verbose){\n    cat(\"Smoothing Derivative\\n\")\n  }  \n  dy = get.deriv.smooth.hist(\n    x,\n    coefs=smooth1$coefs,\n    knots=smooth1$knots,\n    deg=smooth1$deg,\n    deriv.deg=1)\n  which.zero.crossing = which(\n    (dy[1:(length(x)-1)]>0) > (dy[2:(length(x))]>0)\n    )\n  largest.peak = x[which.zero.crossing[which.max(y[which.zero.crossing])]]\n  return(largest.peak)\t\n}\n\n#' @title Get Last Peak\n#'\n#' @description This function grabs the last peak or shoulder.\n#' @param x values of midpoints from \\code{\\link{hist}}\n#' @param y values of counts from \\code{\\link{hist}}\n#' @param rare.prop Proportion used to remove rare intensity tail\n#' @param verbose print diagnostic output\n#' @param remove.tail Remove rare intensity tail\n#' @param ... arguments to be passed to \\code{\\link{smooth_hist}}\n#' @export\n#' @return Value of x that is the last peak\n#' @examples\n#' data(t1.voi)\n#' system.time({\n#' img.hist = hist(t1.voi, \n#' breaks=2000, \n#' plot=FALSE)\n#' y = img.hist$counts\n#' x = img.hist$mids\n#' x = x[!is.na(y)];\n#' y = y[!is.na(y)]\n#' # 20 used for speed of example\n#' nawm_peak = get.last.mode(x, y, k=20)\n#' hist(t1.voi, breaks=2000, border=\"red\")\n#' abline(v=nawm_peak)\n#' })\n#'  \nget.last.mode = function(x,y, \n  rare.prop=1/5, verbose=TRUE, remove.tail = TRUE, ...) {\n  \n  \n  #Remove rare intensity tail\n  if (remove.tail){\n    which.rare <- y < (rare.prop*max(y))\n    y = y[!which.rare]\n    x = x[!which.rare]\n  }\n  \n  if (verbose){\n    cat(\"Smoothing Histogram\\n\")\n  }  \n  #estimate derivative\n  system.time({\n    smooth1 = smooth_hist(x, y, ...)\n  })\n  #estimate derivative\n  if (verbose){\n    cat(\"Smoothing Derivative\\n\")\n  }    \n  dy<-get.deriv.smooth.hist(x, \n    coefs=smooth1$coefs,\n    knots=smooth1$knots,\n    deg=smooth1$deg,\n    deriv.deg=1)\n  which.zero.crossing<-which(\n    (dy[1:(length(x)-1)]>0) > (dy[2:(length(x))]>0)\n  )\n  last.peak<-max(x[which.zero.crossing])\n  #if (last.peak<median(t1.voi[t1.voi>mean(t1.voi)])) {\n  # biggest.shoulder<-(x[x>median(t1.voi[t1.voi>mean(t1.voi)])])[which.min(abs(dy[x>median(t1.voi[t1.voi>mean(t1.voi)])]))]\n  # return(biggest.shoulder)\n  #} else {\n  # return(last.peak)\n  #}\n  return(last.peak) \n}\n\n",
    "created" : 1402681947880.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3456906089",
    "id" : "27E2DF75",
    "lastKnownWriteTime" : 1403062230,
    "path" : "~/Dropbox/Packages/WhiteStripe/R/get.largest.mode.R",
    "project_path" : "R/get.largest.mode.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}